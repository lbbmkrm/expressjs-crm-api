generator client { 
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ================= ENUM ================= */
enum Roles {
  ADMIN
  MANAGER
  SALES
  VIEWER
}

enum LeadStatus {
  NEW
  CONTACTED
  WON
  LOST
  CONVERTED
}

enum OpportunityStage {
  QUALIFICATION
  NEED_ANALYSIS
  PROPOSAL_PRESENTATION
  NEGOTIATION
  WON
  LOST
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum CampaignStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum CampaignType {
  EMAIL
  SOCIAL_MEDIA
  ADS
  OTHER
}

enum DocumentType {
  PROPOSAL
  ORDER
  INVOICE
  QUOTE
  CONTRACT
  IMAGE
  OTHER
}

/* ================= CORE MODELS ================= */
model User {
  id Int @id @default(autoincrement())
  role Roles @default(VIEWER)
  username String @db.VarChar(100) @unique
  email String @db.VarChar(100) @unique
  password String @db.VarChar(255)
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  dashboard Dashboard? @relation("dashboardUser")
  campaign Campaign[] @relation("campaignCreator")
  customers Customer[] @relation("customerCreator")
  contacts Contact[] @relation("contactCreator")
  leads Lead[] @relation("leadCreator")
  opportunities Opportunity[] @relation("opportunityCreator")
  taskAssigned Task[] @relation("taskAssigned")
  taskCreator Task[] @relation("taskCreator")
  notes Note[] @relation("noteCreator")
  activities Activity[] @relation("activityCreator")
  products Product[] @relation("productCreator")
  sales Sale[] @relation("saleUser")
  ticketCreator Ticket[] @relation("ticketCreator")
  ticketAssigned Ticket[] @relation("ticketAssigned")
  documents Document[] @relation("documentCreator")
    
  @@map("users")
}

model Customer {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  email String? @db.VarChar(100)
  phone String? @db.VarChar(20)
  address String? 
  company String?
  createdByUserId Int @map("created_by_user_id") 
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  creator User @relation("customerCreator" ,fields: [createdByUserId], references: [id], onDelete: Restrict)
  contact Contact[] @relation("customerContact")
  lead Lead[] @relation("customerLead")
  opportunities Opportunity[] @relation("customerOpportunity")
  task Task[] @relation("taskCustomer")
  note Note[] @relation("noteCustomer")
  activity Activity[] @relation("activityCustomer")
  sales Sale[] @relation("saleCustomer")
  ticket Ticket[] @relation("ticketCustomer")
  document Document[] @relation("documentCustomer")

  @@map("customers")
}

model Contact {
  id Int @id @default(autoincrement())
  customerId Int @map("customer_id")
  firstName String @map("first_name") @db.VarChar(100) 
  lastName String? @map("last_name") @db.VarChar(100)
  email String? @db.VarChar(100)
  phone String? @db.VarChar(20)
  position String? @db.VarChar(50)
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  customer Customer @relation("customerContact" ,fields: [customerId], references: [id], onDelete: Cascade)
  creator User @relation("contactCreator" ,fields: [createdByUserId], references: [id], onDelete: Cascade)
  note Note[] @relation("noteContact")
  activity Activity[] @relation("activityContact")
  document Document[] @relation("documentContact")

  @@map("contacts")
}

/* ================= MARKETING & SALES PIPELINE ================= */
model Campaign {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String? @db.Text
  type CampaignType @default(OTHER)
  status CampaignStatus @default(PLANNING)
  startDate DateTime @map("start_date")
  endDate DateTime @map("end_date")
  budget Decimal @map("budget") @db.Decimal(15,2)
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  creator User @relation("campaignCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)
  lead Lead[] @relation("leadCampaign")
  document Document[] @relation("documentCampaign")
  @@map("campaigns")
}

model Lead {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100) 
  email String? @db.VarChar(100)
  phone String? @db.VarChar(20)
  status LeadStatus @default(NEW)
  createdByUserId Int @map("created_by_user_id")
  campaignId Int? @map("campaign_id")
  customerId Int? @map("customer_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  campaign Campaign? @relation("leadCampaign" ,fields: [campaignId],references: [id], onDelete: SetNull)
  customer Customer? @relation("customerLead" ,fields: [customerId],references: [id], onDelete: SetNull)
  creator User @relation("leadCreator" ,fields: [createdByUserId], references: [id], onDelete: Restrict)
  opportunity Opportunity? @relation("leadOpportunity")
  task Task[] @relation("taskLead")
  note Note[] @relation("noteLead")
  activity Activity[] @relation("activityLead")
  document Document[] @relation("documentLead")

  @@map("leads")
}

model Opportunity {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  amount Decimal @db.Decimal(15,2)
  stage OpportunityStage @default(QUALIFICATION)
  closeDate DateTime? @map("close_date")
  description String? @db.Text
  customerId Int? @map("customer_id")
  leadId Int? @map("lead_id") @unique
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  customer Customer? @relation("customerOpportunity", fields: [customerId], references: [id], onDelete: SetNull)
  lead Lead? @relation("leadOpportunity", fields: [leadId], references: [id], onDelete: SetNull)
  creator User @relation("opportunityCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)
  task Task[] @relation("taskOpportunity")
  note Note[] @relation("noteOpportunity")
  activity Activity[] @relation("activityOpportunity")
  sales Sale? @relation("saleOpportunity")
  document Document[] @relation("documentOpportunity")

  @@map("opportunities")
}

/* ================= TASK & SUPPORT ================= */
model Task {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String? @db.Text
  status TaskStatus @default(PENDING)
  priority TaskPriority @default(LOW)
  dueDate DateTime @map("due_date")
  completedAt DateTime? @map("completed_at")
  customerId Int? @map("customer_id")
  leadId Int? @map("lead_id")
  opportunityId Int? @map("opportunity_id")
  assignedToUserId Int @map("assigned_to_user_id")
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  customer Customer? @relation("taskCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  lead Lead? @relation("taskLead", fields: [leadId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation("taskOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  assignedToUser User @relation("taskAssigned", fields: [assignedToUserId], references: [id], onDelete: Restrict)
  creator User @relation("taskCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)

  @@map("tasks")
}

model Ticket {
  id Int @id @default(autoincrement())
  subject String @db.VarChar(255)
  description String? @db.Text
  status TicketStatus @default(OPEN)
  customerId Int @map("customer_id")
  assignedToUserId Int @map("assigned_to_user_id")
  createdByUserId Int @map("created_by_user_id")
  resolvedAt DateTime?
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  creator User @relation("ticketCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)
  customer Customer @relation("ticketCustomer", fields: [customerId], references: [id], onDelete: Restrict)
  assignedToUser User @relation("ticketAssigned", fields: [assignedToUserId], references: [id], onDelete: Restrict)
  documents Document[] @relation("documentTicket")
  @@map("tickets")
}

/* ================= INTERACTIONS & DOCUMENTS ================= */
model Note {
  id Int @id @default(autoincrement())
  content String @db.Text
  customerId Int? @map("customer_id")
  contactId Int? @map("contact_id")
  leadId Int? @map("lead_id")
  opportunityId Int? @map("opportunity_id")
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  customer Customer? @relation("noteCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  contact Contact? @relation("noteContact", fields: [contactId], references: [id], onDelete: SetNull)
  lead Lead? @relation("noteLead", fields: [leadId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation("noteOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  creator User @relation("noteCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)

  @@map("notes") 
}

model Activity {
  id Int @id @default(autoincrement())
  type ActivityType @default(NOTE)
  subject String @db.VarChar(255)
  content String @db.Text
  createdByUserId Int @map("created_by_user_id")
  customerId Int? @map("customer_id")
  contactId Int? @map("contact_id")
  leadId Int? @map("lead_id")
  opportunityId Int? @map("opportunity_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  customer Customer? @relation("activityCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  contact Contact? @relation("activityContact", fields: [contactId], references: [id], onDelete: SetNull)
  lead Lead? @relation("activityLead", fields: [leadId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation("activityOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  creator User @relation("activityCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)
  documents Document[] @relation("documentActivity")

  @@map("activities")
}

model Document {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  path String @db.VarChar(255)
  size Int 
  fileType String @map("file_type") @db.VarChar(255)
  documentType DocumentType @default(OTHER) @map("document_type")
  createdByUserId Int @map("created_by_user_id")
  customerId Int? @map("customer_id")
  contactId Int? @map("contact_id")
  leadId Int? @map("lead_id")
  opportunityId Int? @map("opportunity_id")
  campaignId Int? @map("campaign_id")
  saleId Int? @map("sale_id")
  ticketId Int? @map("ticket_id")
  activityId Int? @map("activity_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  creator User @relation("documentCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)
  customer Customer? @relation("documentCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  contact Contact? @relation("documentContact", fields: [contactId], references: [id], onDelete: SetNull)
  lead Lead? @relation("documentLead", fields: [leadId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation("documentOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  campaign Campaign? @relation("documentCampaign", fields: [campaignId], references: [id], onDelete: SetNull)
  sale Sale? @relation("documentSale", fields: [saleId], references: [id], onDelete: SetNull)
  ticket Ticket? @relation("documentTicket", fields: [ticketId], references: [id], onDelete: SetNull)
  activity Activity? @relation("documentActivity", fields: [activityId], references: [id], onDelete: SetNull)

  @@map("documents")
}

/* ================= PRODUCT & SALES ================= */
model Product {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String? @db.Text
  price Decimal @db.Decimal(15,2)
  createdByUserId Int @map("created_by_user_id")

  creator User @relation("productCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  isActive Boolean @default(true)
  saleItems SaleItem[] @relation("saleItemProduct")
  @@map("products")
}

model Sale {
  id Int @id @default(autoincrement())
  customerId Int @map("customer_id")
  opportunityId Int? @map("opportunity_id") @unique
  saleDate DateTime @map("sale_date") @default(now())
  totalAmount Decimal @map("total_amount") @db.Decimal(15,2)
  status SaleStatus @default(PENDING)
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  creator User @relation("saleUser", fields: [createdByUserId], references: [id], onDelete: Restrict)
  customer Customer @relation("saleCustomer", fields: [customerId], references: [id], onDelete: Restrict)
  opportunity Opportunity? @relation("saleOpportunity", fields: [opportunityId], references: [id], onDelete: Restrict)
  items SaleItem[] @relation("saleItemSale")
  document Document[] @relation("documentSale")
  
  @@map("sales")
}

model SaleItem {
  saleId Int @map("sale_id")
  productId Int @map("product_id")
  quantity Int @map("quantity")
  unitPrice Decimal @map("price") @db.Decimal(15,2)
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  sale Sale @relation("saleItemSale", fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation("saleItemProduct", fields: [productId], references: [id], onDelete: Restrict)

  @@id([saleId, productId])
  @@map("sale_items")
}

/* ================= DASHBOARD ================= */
model Dashboard {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String? @db.Text
  layout Json
  userId Int @map("user_id") @unique
  createdAt DateTime @map("created_at") @default(now())

  user User @relation("dashboardUser", fields: [userId], references: [id], onDelete: Restrict)
  @@map("dashboards")
}